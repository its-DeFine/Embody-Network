name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v5
        
      - name: Check file sizes
        run: |
          find . -type f -size +10M | grep -v node_modules | grep -v .git > large_files.txt || true
          if [ -s large_files.txt ]; then
            echo "❌ Large files detected:"
            cat large_files.txt
            exit 1
          fi

  # Linting and code quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install Python linters
        run: |
          pip install flake8 black isort mypy bandit pylint
          
      - name: Run Python linters
        run: |
          # Black formatting check
          black --check services/ customer_agents/ shared/ scripts/ tests/
          
          # Import sorting check
          isort --check-only services/ customer_agents/ shared/ scripts/ tests/
          
          # Flake8 style check
          flake8 services/ customer_agents/ shared/ scripts/ tests/ --max-line-length=120
          
          # Type checking
          mypy services/ customer_agents/ shared/ --ignore-missing-imports
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Lint Control Board
        working-directory: ./control-board
        run: |
          npm ci
          npm run lint
          npm run type-check

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r services/ customer_agents/ -f json -o bandit-results.json
          
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Build all services
  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [lint, security]
    strategy:
      matrix:
        service:
          - api-gateway
          - core-engine
          - agent-manager
          - update-pipeline
          - control-board
          - customer-agent
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            
      - name: Determine build context
        id: context
        run: |
          case "${{ matrix.service }}" in
            "customer-agent")
              echo "context=./customer_agents/base" >> $GITHUB_OUTPUT
              echo "dockerfile=./customer_agents/base/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "control-board")
              echo "context=./control-board" >> $GITHUB_OUTPUT
              echo "dockerfile=./control-board/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "context=./services/${{ matrix.service }}" >> $GITHUB_OUTPUT
              echo "dockerfile=./services/${{ matrix.service }}/Dockerfile" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.context }}
          file: ${{ steps.context.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov pytest-asyncio pytest-mock faker
          pip install -r services/api-gateway/requirements.txt
          pip install -r services/core-engine/requirements.txt
          pip install -r services/agent-manager/requirements.txt
          pip install -r customer_agents/base/requirements.txt
          
      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=services --cov=customer_agents --cov=shared \
            --cov-report=xml --cov-report=html --junitxml=junit/unit-test-results.xml
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            junit/unit-test-results.xml
            htmlcov/

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d api-gateway core-engine
          sleep 10
          
      - name: Check service health
        run: |
          curl -f http://localhost:8000/health || exit 1
          
      - name: Run integration tests
        run: |
          pytest tests/integration -v --junitxml=junit/integration-test-results.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: junit/integration-test-results.xml
          
      - name: Collect logs
        if: failure()
        run: |
          docker-compose logs > docker-compose.log
          
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: integration-test-logs
          path: docker-compose.log

  # E2E tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up test environment
        run: |
          cp .env.example .env.test
          echo "TRADING_MODE=simulated" >> .env.test
          echo "ENABLE_GPU_DEPLOYMENT=false" >> .env.test
          
      - name: Start full stack
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          bash scripts/wait-for-services.sh
          
      - name: Run E2E tests
        run: |
          docker-compose -f docker-compose.test.yml run --rm test-runner \
            pytest tests/e2e -v --junitxml=junit/e2e-test-results.xml
            
      - name: Run control board tests
        run: |
          # Test control board is accessible
          curl -f http://localhost:3001 || exit 1
          
          # Run Playwright tests for UI
          docker-compose -f docker-compose.test.yml run --rm playwright-runner \
            npm test
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            junit/e2e-test-results.xml
            playwright-report/
            
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: screenshots/

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          bash scripts/wait-for-services.sh
          
      - name: Run load tests
        run: |
          docker run --rm -v $PWD:/mnt/locust \
            --network host \
            locustio/locust \
            -f /mnt/locust/tests/performance/locustfile.py \
            --headless \
            -u 50 \
            -r 5 \
            -t 2m \
            --html performance-report.html
            
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  # GPU tests (optional)
  gpu-tests:
    name: GPU Tests
    runs-on: [self-hosted, gpu]
    needs: e2e-tests
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[gpu]')
    steps:
      - uses: actions/checkout@v4
      
      - name: Check GPU availability
        run: |
          nvidia-smi || exit 0
          
      - name: Start GPU stack
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.gpu.yml up -d
          sleep 30
          
      - name: Run GPU tests
        run: |
          docker-compose -f docker-compose.test.yml run --rm test-runner \
            pytest tests/gpu -v

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          
      - name: Run smoke tests
        run: |
          bash scripts/smoke_tests.sh staging

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          
      - name: Run smoke tests
        run: |
          bash scripts/smoke_tests.sh production
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for version ${{ github.run_number }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-pre-release-versions: 'true'