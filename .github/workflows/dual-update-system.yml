name: Dual-Mode Update System

on:
  schedule:
    # Run every hour to check for updates
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - image_only
          - structural
          - check_only
      auto_approve:
        description: 'Auto-approve updates without manual intervention'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  
permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: read

jobs:
  detect-updates:
    runs-on: ubuntu-latest
    outputs:
      update_type: ${{ steps.detect.outputs.update_type }}
      changes: ${{ steps.detect.outputs.changes }}
      needs_update: ${{ steps.detect.outputs.needs_update }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install pyyaml requests
      
      - name: Detect update type
        id: detect
        run: |
          python scripts/dual_update_manager.py --check-only > update_report.txt
          
          # Parse output
          UPDATE_TYPE=$(grep "Update type:" update_report.txt | cut -d: -f2 | xargs)
          echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
          
          # Check if update is needed
          if [ "$UPDATE_TYPE" = "none" ]; then
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          
          # Save changes as JSON
          grep -A 100 "Changes:" update_report.txt > changes.json
          echo "changes=$(cat changes.json | jq -c .)" >> $GITHUB_OUTPUT
      
      - name: Upload detection report
        uses: actions/upload-artifact@v3
        with:
          name: update-detection-report
          path: update_report.txt

  create-issues:
    needs: detect-updates
    if: needs.detect-updates.outputs.needs_update == 'true'
    runs-on: ubuntu-latest
    outputs:
      main_issue: ${{ steps.issues.outputs.main_issue }}
      submodule_issue: ${{ steps.issues.outputs.submodule_issue }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create update issues
        id: issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPDATE_TYPE="${{ needs.detect-updates.outputs.update_type }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Create main repository issue
          MAIN_ISSUE=$(gh issue create \
            --title "[Auto-Update] $UPDATE_TYPE changes detected" \
            --body "## Automated Update Detection
          
          **Type:** $UPDATE_TYPE
          **Detected at:** $TIMESTAMP
          
          ### Changes Summary
          \`\`\`json
          ${{ needs.detect-updates.outputs.changes }}
          \`\`\`
          
          ### Update Strategy
          $(if [ "$UPDATE_TYPE" = "image_only" ]; then
            echo "- Watchtower will handle image updates automatically"
            echo "- No structural changes required"
          else
            echo "- Full cluster revamp required"
            echo "- Services will be stopped and recreated"
          fi)
          
          ### Next Steps
          1. Review the changes
          2. Approve the update PR when created
          3. Monitor deployment
          
          ---
          *Generated by Dual-Mode Update System*" \
            --label "auto-update,enhancement")
          
          echo "main_issue=$MAIN_ISSUE" >> $GITHUB_OUTPUT
          
          # Check if submodule updates are needed
          if grep -q "code_changed\|dockerfile_changed" <<< "${{ needs.detect-updates.outputs.changes }}"; then
            # Create submodule issue (would need access token for external repo)
            echo "submodule_issue=manual-required" >> $GITHUB_OUTPUT
          fi

  apply-image-updates:
    needs: [detect-updates, create-issues]
    if: |
      needs.detect-updates.outputs.needs_update == 'true' &&
      needs.detect-updates.outputs.update_type == 'image_only'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Trigger Watchtower update
        run: |
          echo "Image-only update detected. Watchtower will handle this automatically."
          echo "No PR needed for image-only updates."
      
      - name: Close issue as completed
        if: needs.create-issues.outputs.main_issue != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ needs.create-issues.outputs.main_issue }} \
            --comment "Image-only update handled automatically by Watchtower."

  apply-structural-updates:
    needs: [detect-updates, create-issues]
    if: |
      needs.detect-updates.outputs.needs_update == 'true' &&
      (needs.detect-updates.outputs.update_type == 'structural' ||
       needs.detect-updates.outputs.update_type == 'mixed')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Create update branch
        id: branch
        run: |
          BRANCH_NAME="auto-update/$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      
      - name: Apply updates
        run: |
          # Pull latest changes
          git submodule update --remote --merge
          
          # Stage changes
          git add -A
          
          # Commit if there are changes
          if ! git diff --cached --quiet; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git commit -m "feat: apply structural updates from upstream
            
            Update type: ${{ needs.detect-updates.outputs.update_type }}
            
            Changes applied:
            - Docker Compose structural changes
            - Configuration updates
            - Service modifications
            
            Closes ${{ needs.create-issues.outputs.main_issue }}"
          fi
      
      - name: Push branch
        run: |
          git push origin ${{ steps.branch.outputs.branch_name }}
      
      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "feat: Apply ${{ needs.detect-updates.outputs.update_type }} updates" \
            --body "## Summary
          
          Automated structural updates detected and applied by the Dual-Mode Update System.
          
          ### Update Type
          **${{ needs.detect-updates.outputs.update_type }}**
          
          ### Changes
          \`\`\`json
          ${{ needs.detect-updates.outputs.changes }}
          \`\`\`
          
          ### Testing Checklist
          - [ ] All services start successfully
          - [ ] Health checks pass
          - [ ] No breaking changes for existing deployments
          - [ ] Rollback procedure documented
          
          ### Deployment Strategy
          1. Review docker-compose changes
          2. Backup current configuration
          3. Apply updates to staging environment first
          4. Monitor health metrics
          5. Deploy to production
          
          Closes ${{ needs.create-issues.outputs.main_issue }}
          
          ---
          *Generated by Dual-Mode Update System*" \
            --base main \
            --head ${{ steps.branch.outputs.branch_name }} \
            --label "auto-update,enhancement")
          
          echo "Pull request created: $PR_URL"

  notify:
    needs: [detect-updates, create-issues, apply-image-updates, apply-structural-updates]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.detect-updates.outputs.needs_update }}" = "true" ]; then
            echo "Update detected and processed:"
            echo "- Type: ${{ needs.detect-updates.outputs.update_type }}"
            echo "- Issue: ${{ needs.create-issues.outputs.main_issue }}"
            
            # Add webhook notification here if configured
            # curl -X POST ${{ secrets.WEBHOOK_URL }} ...
          else
            echo "No updates needed at this time."
          fi