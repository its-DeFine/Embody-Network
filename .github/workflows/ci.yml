name: CI

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy types-redis types-requests
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format with black
      run: black --check app/
    
    - name: Type check with mypy
      run: mypy app/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
      env:
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        ADMIN_PASSWORD: test-password
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t autogen-platform:test .
        docker build -t autogen-platform-agent:test -f Dockerfile.agent .
    
    - name: Run Docker container
      run: |
        docker run -d --name test-app \
          -e JWT_SECRET=test-secret \
          -e ADMIN_PASSWORD=test-password \
          -e REDIS_URL=redis://redis:6379 \
          -p 8000:8000 \
          autogen-platform:test
    
    - name: Wait for app to start
      run: |
        echo "Waiting for app to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "App is up!"
            break
          fi
          echo "Waiting... (attempt $i/30)"
          sleep 2
        done
    
    - name: Health check
      run: |
        curl -f http://localhost:8000/health || exit 1
        echo "Health check passed!"
    
    - name: Cleanup
      if: always()
      run: |
        docker stop test-app || true
        docker rm test-app || true

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add actual deployment commands here, such as:
        # - Docker registry push
        # - Kubernetes deployment
        # - Cloud provider deployment
        # - SSH deployment to server
        # Example:
        # docker tag autogen-platform:test $DOCKER_REGISTRY/autogen-platform:latest
        # docker push $DOCKER_REGISTRY/autogen-platform:latest